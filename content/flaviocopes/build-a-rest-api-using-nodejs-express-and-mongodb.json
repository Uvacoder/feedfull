{
  "title": "Build a REST API using Node.js, Express and MongoDB",
  "url": "https://flaviocopes.com/rest-api-express-mongodb/",
  "date": "Tue, 01 Feb 2022 07:00:00 +0200",
  "content": "        <p>In this tutorial we&rsquo;ll create a REST API using <a href=\"https://flaviocopes.com/page/node-handbook/\">Node.js</a> and <a href=\"https://flaviocopes.com/page/express-handbook/\">Express</a>.</p><p>This API will expose a set of GET and POST endpoints to allow getting data out, and sending data in.</p><p>We&rsquo;ll use a <a href=\"https://flaviocopes.com/mongodb/\">MongoDB</a> database to store this data.</p><blockquote><p>Tip: make sure you installed a MongoDB database on your system before going on with the tutorial (or use a cloud MongoDB database if you prefer)</p></blockquote><p>Our task is to create a trip cost calculator app.</p><p>Imagine going on a trip, and you have your app (which can be a progressive web app, or a mobile app for example) where you add any expense you make. Gasoline, hotels, food, tickets and so on.</p><p>When the trip ends, you archive it and it becomes part of the history - which you can navigate and see how much you spent in the past trips.</p><p>We&rsquo;re not going to create the frontend of the application here, just the API.</p><p>Let&rsquo;s now dissect this into details, and translate it into a series of API endpoints.</p><p>An endpoint is a unique URL we will call to create an operation.</p><p>Like adding a new trip with its name.</p><p>At the beginning, there is no trip stored, and we need to add one. I imagine the app will ask the user for the name, and there will be a &ldquo;Create trip&rdquo; button. When clicked, the app will send the name to us, to the <code>/trip</code> endpoint with the <code>POST</code> HTTP method.</p><p>We have our first endpoint, which will accept a <code>name</code> property.</p><pre tabindex=\"0\"><code>POST /trip { name }</code></pre><p>Another endpoint will list the trips, and it&rsquo;s</p><pre tabindex=\"0\"><code>GET /trips</code></pre><p>By default, it will return the trips ordered by creation date.</p><p>When the user wants to add a new expense, the app will invoke the <code>/expense</code> endpoint with the POST method, with some parameters that describe the expense</p><pre tabindex=\"0\"><code>POST /expense { trip, date, amount, category, description }</code></pre><p><code>trip</code> is the ID of the currently selected trip.</p><p><code>category</code> is the name of the category of the expense. We&rsquo;ll provide a list of categories to choose from, which is static: <code>travel</code>, <code>food</code>, <code>accomodation</code>, <code>fun</code>.</p><p>When we want to retrieve a trip expenses, we call the <code>/expenses</code> endpoint with the GET method:</p><pre tabindex=\"0\"><code>GET /expenses { trip }</code></pre><p>passing the <code>trip</code> identifier.</p><h2 id=\"let-s-start-the-project\">Let&rsquo;s start the project</h2><p>I am going to use a local installation of Node.js.</p><p>We start our Node.js project by going into a new folder (call it <code>tripcost</code>) and typing the command <code>npm init -y</code>.</p><p><img src=\"1.png\" alt=\"\" /></p><p><img src=\"2.png\" alt=\"\" /></p><p>We&rsquo;ll use MongoDB as our database.</p><p>Install the <code>mongodb</code> Node.js package with:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-sh\" data-lang=\"sh\">npm install mongodb</code></pre></div><p>While you&rsquo;re here, also install Express:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-sh\" data-lang=\"sh\">npm install express</code></pre></div><p>Create a <code>server.js</code> file now, where we&rsquo;ll store our API code, and start requiring Express and MongoDB:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >express</span> <span >=</span> <span >require</span>(<span >&#34;express&#34;</span>)<span >const</span> <span >mongo</span> <span >=</span> <span >require</span>(<span >&#34;mongodb&#34;</span>).<span >MongoClient</span></code></pre></div><p>Initialize the Express app:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >app</span> <span >=</span> <span >express</span>()</code></pre></div><p>And now we can add the stubs for the API endpoints we support:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >app</span>.<span >post</span>(<span >&#34;/trip&#34;</span>, (<span >req</span>, <span >res</span>) =&gt; {  <span >/* */</span>})<span >app</span>.<span >get</span>(<span >&#34;/trips&#34;</span>, (<span >req</span>, <span >res</span>) =&gt; {  <span >/* */</span>})<span >app</span>.<span >post</span>(<span >&#34;/expense&#34;</span>, (<span >req</span>, <span >res</span>) =&gt; {  <span >/* */</span>})<span >app</span>.<span >get</span>(<span >&#34;/expenses&#34;</span>, (<span >req</span>, <span >res</span>) =&gt; {  <span >/* */</span>})</code></pre></div><p>Finally, use the <code>listen()</code> method on <code>app</code> to start the server:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >app</span>.<span >listen</span>(<span >3000</span>, () =&gt; <span >console</span>.<span >log</span>(<span >&#34;Server ready&#34;</span>))</code></pre></div><p>You can run the application using <code>node server.js</code> in the project folder.</p><h2 id=\"adding-trips\">Adding trips</h2><p>We offer the client a way to add trip using the <code>POST /trip</code> endpoint:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >app</span>.<span >post</span>(<span >&#34;/trip&#34;</span>, (<span >req</span>, <span >res</span>) =&gt; {  <span >/* */</span>})</code></pre></div><p>Let&rsquo;s go ahead and implement it.</p><p>We already included the MongoDB library, so we can use it in our endpoint implementation:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >mongo</span> <span >=</span> <span >require</span>(<span >&#34;mongodb&#34;</span>).<span >MongoClient</span></code></pre></div><p>Next, we build the MongoDB server URL. If you are running the project locally, and MongoDB locally too, the URL is likely this:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >url</span> <span >=</span> <span >&#34;mongodb://localhost:27017&#34;</span></code></pre></div><p>because <code>27017</code> is the default port.</p><p>Next, let&rsquo;s connect to the database using <code>connect()</code>:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >let</span> <span >db</span><span >mongo</span>.<span >connect</span>(  <span >url</span>,  {    <span >useNewUrlParser</span><span >:</span> <span >true</span>,    <span >useUnifiedTopology</span><span >:</span> <span >true</span>,  },  (<span >err</span>, <span >client</span>) =&gt; {    <span >if</span> (<span >err</span>) {      <span >console</span>.<span >error</span>(<span >err</span>)      <span >return</span>    }    <span >db</span> <span >=</span> <span >client</span>.<span >db</span>(<span >&#34;tripcost&#34;</span>)  })</code></pre></div><p>and while we&rsquo;re here, let&rsquo;s also get a reference to the <em>trips</em> and <em>expenses</em> collections:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >let</span> <span >db</span>, <span >trips</span>, <span >expenses</span><span >mongo</span>.<span >connect</span>(  <span >url</span>,  {    <span >useNewUrlParser</span><span >:</span> <span >true</span>,    <span >useUnifiedTopology</span><span >:</span> <span >true</span>,  },  (<span >err</span>, <span >client</span>) =&gt; {    <span >if</span> (<span >err</span>) {      <span >console</span>.<span >error</span>(<span >err</span>)      <span >return</span>    }    <span >db</span> <span >=</span> <span >client</span>.<span >db</span>(<span >&#34;tripcost&#34;</span>)    <span >trips</span> <span >=</span> <span >db</span>.<span >collection</span>(<span >&#34;trips&#34;</span>)    <span >expenses</span> <span >=</span> <span >db</span>.<span >collection</span>(<span >&#34;expenses&#34;</span>)  })</code></pre></div><p>Now we can go back to our endpoint.</p><p>This endpoint expects 1 parameter, <code>name</code>, which represents how we call our trip. For example <em>Sweden 2018</em> or <em>Yosemite August 2018</em>.</p><blockquote><p>See my tutorial on <a href=\"https://flaviocopes.com/express-post-query-variables/\">how to retrieve the POST query parameters using Express</a></p></blockquote><p>We expect data coming as JSON, using the <code>Content-Type: application/json</code>, so we need to use the <code>express.json()</code> middleware:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >app</span>.<span >use</span>(<span >express</span>.<span >json</span>())</code></pre></div><p>We can now access the data by referencing it from <code>Request.body</code>:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >app</span>.<span >post</span>(<span >&#34;/trip&#34;</span>, (<span >req</span>, <span >res</span>) =&gt; {  <span >const</span> <span >name</span> <span >=</span> <span >req</span>.<span >body</span>.<span >name</span>})</code></pre></div><p>Once we have the name, we can use the <code>trips.insertOne()</code> method to add the trip to the database:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >app</span>.<span >post</span>(<span >&#34;/trip&#34;</span>, (<span >req</span>, <span >res</span>) =&gt; {  <span >const</span> <span >name</span> <span >=</span> <span >req</span>.<span >body</span>.<span >name</span>  <span >trips</span>.<span >insertOne</span>({ <span >name</span><span >:</span> <span >name</span> }, (<span >err</span>, <span >result</span>) =&gt; {})})</code></pre></div><blockquote><p>If you get an error like &ldquo;could not read property insertOne of undefined&rdquo;, make sure <code>trips</code> is successfully set in <code>mongo.connect()</code>. Add a console.log(trips) before calling insertOne() to make sure it contains the collection object.</p></blockquote><p>We handle the error, if present in the <code>err</code> variable, otherwise we send a 200 response (successful) to the client, adding an <code>ok: true</code> message in the JSON response:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >app</span>.<span >post</span>(<span >&#34;/trip&#34;</span>, (<span >req</span>, <span >res</span>) =&gt; {  <span >const</span> <span >name</span> <span >=</span> <span >req</span>.<span >body</span>.<span >name</span>  <span >trips</span>.<span >insertOne</span>({ <span >name</span><span >:</span> <span >name</span> }, (<span >err</span>, <span >result</span>) =&gt; {    <span >if</span> (<span >err</span>) {      <span >console</span>.<span >error</span>(<span >err</span>)      <span >res</span>.<span >status</span>(<span >500</span>).<span >json</span>({ <span >err</span><span >:</span> <span >err</span> })      <span >return</span>    }    <span >console</span>.<span >log</span>(<span >result</span>)    <span >res</span>.<span >status</span>(<span >200</span>).<span >json</span>({ <span >ok</span><span >:</span> <span >true</span> })  })})</code></pre></div><p>That&rsquo;s it!</p><p>Now restart the Node application by hitting <code>ctrl-C</code> to stop it, and run it again.</p><p>You can test this endpoint using the <a href=\"https://insomnia.rest\">Insomnia application</a>, a great way to test and interact with REST endpoints:</p><p><img src=\"3.png\" alt=\"\" /></p><h2 id=\"list-the-trips\">List the trips</h2><p>The list of trips is returned by the <code>GET /trips</code> endpoint. It accepts no parameters:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >app</span>.<span >get</span>(<span >&#34;/trips&#34;</span>, (<span >req</span>, <span >res</span>) =&gt; {  <span >/* */</span>})</code></pre></div><p>We already initialized the <code>trips</code> collection, so we can directly access that to get the list.</p><p>We use the <code>trips.find()</code> method, which result we must convert to an array using <code>toArray()</code>:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >app</span>.<span >get</span>(<span >&#34;/trips&#34;</span>, (<span >req</span>, <span >res</span>) =&gt; {  <span >trips</span>.<span >find</span>().<span >toArray</span>((<span >err</span>, <span >items</span>) =&gt; {})})</code></pre></div><p>Then we can handle the <code>err</code> and <code>items</code> results:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >app</span>.<span >get</span>(<span >&#34;/trips&#34;</span>, (<span >req</span>, <span >res</span>) =&gt; {  <span >trips</span>.<span >find</span>().<span >toArray</span>((<span >err</span>, <span >items</span>) =&gt; {    <span >if</span> (<span >err</span>) {      <span >console</span>.<span >error</span>(<span >err</span>)      <span >res</span>.<span >status</span>(<span >500</span>).<span >json</span>({ <span >err</span><span >:</span> <span >err</span> })      <span >return</span>    }    <span >res</span>.<span >status</span>(<span >200</span>).<span >json</span>({ <span >trips</span><span >:</span> <span >items</span> })  })})</code></pre></div><p>Here&rsquo;s the result of the API call in Insomnia:</p><p><img src=\"4.png\" alt=\"\" /></p><h2 id=\"add-an-expense\">Add an expense</h2><p>We previously got the list of trips. Every trip has an associated <code>_id</code> property which is added by MongoDB directly when it&rsquo;s added:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-json\" data-lang=\"json\">{  <span >&#34;trips&#34;</span>: [    {      <span >&#34;_id&#34;</span>: <span >&#34;5bdf03aed64fb0cd04e15728&#34;</span>,      <span >&#34;name&#34;</span>: <span >&#34;Yellowstone 2018&#34;</span>    },    {      <span >&#34;_id&#34;</span>: <span >&#34;5bdf03c212d45cdb5ccec636&#34;</span>,      <span >&#34;name&#34;</span>: <span >&#34;Sweden 2017&#34;</span>    },    {      <span >&#34;_id&#34;</span>: <span >&#34;5bdf047ccf4f42dc368590f6&#34;</span>,      <span >&#34;name&#34;</span>: <span >&#34;First trip&#34;</span>    }  ]}</code></pre></div><p>We&rsquo;ll use this <code>_id</code> to register a new expense.</p><p>If you remember, the endpoint to add a new expense is this:</p><pre tabindex=\"0\"><code>POST /expense { trip, date, amount, category, description }</code></pre><p><code>trip</code> in this case will be the <code>_id</code> of one of the trips we previously registered. Imagine that in the app, the user will add one trip, and that will remain the current trip until a new one is added (or selected).</p><p>Let&rsquo;s go ahead and implement our stub:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >app</span>.<span >post</span>(<span >&#34;/expense&#34;</span>, (<span >req</span>, <span >res</span>) =&gt; {  <span >/* */</span>})</code></pre></div><p>Like when adding a trip, we&rsquo;re going to use the insertOne() method, this time on the <code>expenses</code> collection.</p><p>We get 5 parameters from the request body:</p><ul><li><code>trip</code></li><li><code>date</code> the date, in ISO 8601 format (e.g. <code>2018-07-22T07:22:13</code>), in the GMT timezone</li><li><code>amount</code> an integer with the amount</li><li><code>category</code> which is one from <code>travel</code>, <code>food</code>, <code>accomodation</code>, <code>fun</code></li><li><p><code>description</code> a description for the expense, so we&rsquo;ll remember about it later</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >app</span>.<span >post</span>(<span >&#34;/expense&#34;</span>, (<span >req</span>, <span >res</span>) =&gt; {<span >expenses</span>.<span >insertOne</span>({  <span >trip</span><span >:</span> <span >req</span>.<span >body</span>.<span >trip</span>,  <span >date</span><span >:</span> <span >req</span>.<span >body</span>.<span >date</span>,  <span >amount</span><span >:</span> <span >req</span>.<span >body</span>.<span >amount</span>,  <span >category</span><span >:</span> <span >req</span>.<span >body</span>.<span >category</span>,  <span >description</span><span >:</span> <span >req</span>.<span >body</span>.<span >description</span>,},(<span >err</span>, <span >result</span>) =&gt; {  <span >if</span> (<span >err</span>) {    <span >console</span>.<span >error</span>(<span >err</span>)    <span >res</span>.<span >status</span>(<span >500</span>).<span >json</span>({ <span >err</span><span >:</span> <span >err</span> })    <span >return</span>  }  <span >res</span>.<span >status</span>(<span >200</span>).<span >json</span>({ <span >ok</span><span >:</span> <span >true</span> })})})</code></pre></div></li></ul><p><img src=\"5.png\" alt=\"\" /></p><h2 id=\"list-all-expenses\">List all expenses</h2><p>The last piece of the puzzle is getting the expenses.</p><p>We need to fill the <code>/expenses</code> endpoint stub, the last one missing:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >app</span>.<span >get</span>(<span >&#34;/expenses&#34;</span>, (<span >req</span>, <span >res</span>) =&gt; {  <span >/* */</span>})</code></pre></div><p>This endpoint accepts the <code>trip</code> parameter, which is the <code>_id</code> property of a trip stored in the database.</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >app</span>.<span >get</span>(<span >&#34;/expenses&#34;</span>, (<span >req</span>, <span >res</span>) =&gt; {  <span >expenses</span>.<span >find</span>({ <span >trip</span><span >:</span> <span >req</span>.<span >body</span>.<span >trip</span> }).<span >toArray</span>((<span >err</span>, <span >items</span>) =&gt; {    <span >if</span> (<span >err</span>) {      <span >console</span>.<span >error</span>(<span >err</span>)      <span >res</span>.<span >status</span>(<span >500</span>).<span >json</span>({ <span >err</span><span >:</span> <span >err</span> })      <span >return</span>    }    <span >res</span>.<span >status</span>(<span >200</span>).<span >json</span>({ <span >expenses</span><span >:</span> <span >items</span> })  })})</code></pre></div><p>This Insomnia screenshot shows it at work:</p><p><img src=\"6.png\" alt=\"\" /></p>      ",
  "image": "https://flaviocopes.com/img/avatar.png",
  "description": "In this tutorial we’ll create a REST API using Node.js and Express.\nThis API will expose a set of GET and POST endpoints to allow getting data out, and sending data in.\nWe’ll use a MongoDB database to store this data.\n Tip: make sure you installed a MongoDB database on your system before going on with the tutorial (or use a cloud MongoDB database if you prefer)\n Our task is to create a trip cost calculator app.",
  "publisher": "Flaviocopes",
  "publisherUrl": "https://flaviocopes.com/"
}