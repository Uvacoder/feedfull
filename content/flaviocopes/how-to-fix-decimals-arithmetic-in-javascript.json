{
  "title": "How to fix decimals arithmetic in JavaScript",
  "url": "https://flaviocopes.com/javascript-decimal-arithmetics/",
  "date": "Mon, 25 Apr 2022 07:00:00 +0200",
  "content": "        <p>If you try to do the sum of two decimal numbers in JavaScript you might have a surprise.</p><p><code>0.1 + 0.1</code> is, as you expect, <code>0.2</code></p><p>But sometimes you have some unexpected result.</p><p>Like for <code>0.1 + 0.2</code>.</p><p>The result is not <code>0.3</code> as you&rsquo;d expect, but it&rsquo;s <code>0.30000000000000004</code>.</p><p>Or <code>1.4 - 1</code>, the result is <code>0.3999999999999999</code></p><p><img src=\"Screen Shot 2022-04-14 at 10.15.56.png\" alt=\"How to fix decimals arithmetic in JavaScript\" /></p><p>I&rsquo;m sure your question is: WHY?</p><p>First, this is not unique to JavaScript. It&rsquo;s the same for every programming language.</p><p>The reason is due to the fact computers store data as binary, <code>0</code> or <code>1</code>.</p><p>Any value is represented in the <a href=\"https://flaviocopes.com/binary-number-system/\">binary numeric system</a>, as a power of two.</p><p>1 is 1 * 2^0</p><p>10 is 1 * 2^1 + 0 * 2^0</p><p>Not every decimal number can be represented perfectly in this binary format, because some numbers are repeating numbers in binary. Try to <a href=\"https://flaviocopes.com/converting-decimal-to-binary/\">convert 0.1 from decimal to binary</a>.</p><p>Long story short, we&rsquo;d need infinite precision to represent 0.1, and while computers can approximate that well, when we do calculations we lose some data since we need to &ldquo;cut&rdquo; somewhere, and this leads to those unexpected results you see above.</p><p>You can use libraries like <a href=\"https://mikemcl.github.io/decimal.js/\">decimal.js</a>, <a href=\"https://github.com/MikeMcl/bignumber.js/\">bignumber.js</a> or <a href=\"https://github.com/MikeMcl/big.js\">big.js</a>.</p><p>You can also use a &ldquo;trick&rdquo; like this.</p><p>You decide to cut decimals after 2 positions, for example, and multiply the number by 100 to remove the decimal part.</p><p>Then you divide by 100 after you&rsquo;ve done the sum:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >0.1</span> <span >+</span> <span >0.2</span> <span >//0.30000000000000004</span><span ></span>(<span >0.1</span>.<span >toFixed</span>(<span >2</span>) <span >*</span> <span >100</span> <span >+</span> <span >0.2</span>.<span >toFixed</span>(<span >2</span>) <span >*</span> <span >100</span>) <span >/</span> <span >100</span> <span >//0.3</span></code></pre></div><p>Use <code>10000</code> instead of <code>100</code> to keep 4 decimal positions.</p><p>More abstracted:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >sum</span> <span >=</span> (<span >a</span>, <span >b</span>, <span >positions</span>) =&gt; {  <span >const</span> <span >factor</span> <span >=</span> Math.<span >pow</span>(<span >10</span>, <span >positions</span>)  <span >return</span> (<span >a</span>.<span >toFixed</span>(<span >positions</span>) <span >*</span> <span >factor</span> <span >+</span> <span >b</span>.<span >toFixed</span>(<span >positions</span>) <span >*</span> <span >factor</span>) <span >/</span> <span >factor</span>}<span >sum</span>(<span >0.1</span>, <span >0.2</span>, <span >4</span>) <span >//0.3</span></code></pre></div>      ",
  "image": "https://flaviocopes.com/javascript-decimal-arithmetics/banner.png",
  "description": "Find out how to fix decimals arithmetic in JavaScript",
  "publisher": "Flaviocopes",
  "publisherUrl": "https://flaviocopes.com/"
}