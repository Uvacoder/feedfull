{
  "title": "Roadmap to become a Web Developer in 2022",
  "url": "https://flaviocopes.com/roadmap-web-developer-2022/",
  "date": "Thu, 03 Feb 2022 07:00:00 +0200",
  "content": "        <p>Web Development is always evolving and every year in January I like to take a step back and re-evaluate and observe the ecosystem.</p><p>The question is: where should beginner Web Developers start in 2022, so they will learn skills they&rsquo;ll find jobs for?</p><p>Has the map changed? Is it different from one year ago?</p><p>Changes seem to take forever, but they can be subtle and sometimes things radically change from one year to another and you don&rsquo;t even realize.</p><p>So I started working on a post to guide you towards navigating the Web Development space.</p><p>It&rsquo;s also useful for developers trying to keep up with the ecosystem and stay relevant.Is there anything new you should absolutely learn?</p><p>Let&rsquo;s get into it.</p><p>But first, a note. This is a highly opinionated roadmap. It&rsquo;s not one of those roadmaps that list 1000 different technologies and just leave you in tears and desperation.</p><p>Let me pick for you the best tech and trust me so you can quit analysis paralysis and go on with your progress.</p><p>In Web Development we have 3 paths:</p><ul><li>Frontent developer</li><li>Backend developer</li><li>Full-stack developer</li></ul><p>The line between those roles is a bit blurred. I will focus this post on full-stack, which is my favorite specialization - in which you don&rsquo;t really specialize in frontend or backend, but you&rsquo;re able to create anything and everything that shows up.</p><h2 id=\"aggressively-ignore\">Aggressively ignore</h2><p>Let&rsquo;s first start the roadmap from what we&rsquo;ll ignore.</p><p>In this roadmap I will ignore more specialized niches like UI/UX engineering, accessibility, and other important topics. Those are entirely different professions with their own learning path.</p><p>You can&rsquo;t possibly start by assuming you need to learn everything.</p><p>Aggressively cut.</p><p>We&rsquo;ll ignore mobile development done with Web technologies. That&rsquo;s a completely different field. We&rsquo;ll also ignore any trend that&rsquo;s not Web Development but it&rsquo;s a different kind of development specialization like AI, data science, web3, etc etc etc.</p><h2 id=\"deep-focus-on-5-technologies\">Deep focus on 5 technologies</h2><p>I recommend to deeply focus on a core set of 5 technologies:</p><p>HTMLCSSJavaScriptReactNext.js</p><p>Those 5, in order, are the 5 things you need to master.</p><p>You can count them on one hand.</p><p>3 of them are fundamentals. HTML, CSS, JavaScript. You can&rsquo;t avoid them. Those are the tools of the trade.</p><p>HTML defines the contentCSS defines how we want the content to lookJavaScript defines the behavior</p><p>React is the first real choice I&rsquo;ve made here.</p><p>What is React? React is a technology that simplifies creating user interfaces.</p><p>It makes our life easier in many different ways.</p><p>There are no alternatives to HTML, CSS and JavaScript, but you could choose something else instead of React, like Svelte, Vue, Angular, but I chose React.</p><p>But React is super popular, it has a history and an heritage that allows it to be the de-facto standard. It&rsquo;s used so much that you can find everything, every library, lots of tutorials and courses, and help when you need.</p><p>You can bet on an alternative, but you can also just look at the job market and opportunities that come with React and pick that.</p><p>We need a final piece now. A web application framework.</p><p>We picked React so we need to pick a web application framework that works with React.</p><p>On top of React and the HTML/CSS/JavaScript trio I pick <strong>Next.js</strong> to make it easy to serve React-based websites and applications, and integrate backend and frontend seamlessly.</p><p>So, 3 core technologies that are common for everyone - HTML/CSS/JavaScript, on top we have a super popular UI library - React - and on top of that, a super popular framework: Next.js.</p><p>Now there&rsquo;s more stuff to add to those 5 choices, but you need to start somewhere.</p><p>With those 5 choices made, you&rsquo;ve already eliminated doubt and fear of missing out on a ton of other things that might distract you on your path to become a Web Developer.</p><p>Let me double down on this elimination. Ignore TypeScript, at least in the beginning. I know you&rsquo;ll hear about it all the time, but it&rsquo;s not essential in your journey and it&rsquo;s something you can add at any point in the future.</p><p>JavaScript lets you keep things much simpler, which is essential to stay motivated.</p><h2 id=\"start-with-html-and-css\">Start with HTML and CSS</h2><p>At this point, start learning and start experimenting. Learn HTML, create web pages. Read my <a href=\"https://flaviocopes.com/page/html-handbook/\">HTML Handbook</a>. Do tons of practice. <a href=\"https://codepen.io\">Codepen</a> is a great tool for this.</p><p>Just don&rsquo;t get sucked into the &ldquo;I did this with CSS&rdquo; where people do impossible things with CSS. I have no idea how they do them, and that&rsquo;s art (which is fine if you like it, just not useful for our journey).</p><p>As for CSS, learn the basics. Read my <a href=\"https://flaviocopes.com/page/css-handbook/\">CSS Handbook</a>. And immediately start learning <a href=\"https://tailwindcss.com\">Tailwind</a>, which is a really practical and popular way to apply CSS to your pages.</p><p>CSS can be complicated. Tailwind makes it easier. Trust me, I &ldquo;do CSS&rdquo; since 20 years and with Tailwind I finally got things manageable on every project. And that&rsquo;s what many other people found.</p><p>What projects should you create with HTML and CSS/Tailwind? Well, start from your hobbies and interests. Create random Web pages and see how they show up in your browser.</p><p>Create a page about dogs, about soccer, football, baseball, your favorite Netflix series, your favorite musician, whatever. The important is to experiment.</p><p>Don&rsquo;t get too fancy with HTML and CSS/Tailwind. They are rabbit holes. There is a TON to learn about both. Get familiar with them, use them to get stuff done.</p><p>Get familiar with an editor like VS Code and the basics of the terminal and the Bash shell. Learn Git to version your code. It will save you a lot of time and headaches.</p><h2 id=\"add-javascript\">Add JavaScript</h2><p>Now it&rsquo;s time to learn JavaScript. Download and read my <a href=\"https://flaviocopes.com/page/javascript-handbook/\">JavaScript Beginner&rsquo;s Handbook</a>.</p><p>HTML and CSS define the content and the presentation, while JavaScript is a programming language.</p><p>Using JavaScript we can start having fun.</p><p>The basics are a bit ..boring and can be confusing, as there is lots of theory and new concepts. But it&rsquo;s the thing you&rsquo;ll use the most in Web Development. So it&rsquo;s essential to master it.</p><p>One thing at a time.</p><p>Work on simple projects, gradually add JavaScript to your pages.</p><p>With JavaScript you&rsquo;ll see that you can add some level of interactivity to your pages. You&rsquo;ll explore the DOM, which is the way browsers let us interact with elements on the page.</p><p>You&rsquo;ll create your first form.</p><p>And after you create your first form, you&rsquo;ll have the need to send the form data <em>somewhere</em>.</p><p>Imagine you built an email newsletter signup form. You want to send the email somewhere, so you can store it.</p><h2 id=\"node-js\">Node.js</h2><p>It&rsquo;s now time to learn how to create a simple backend.</p><p>Up to now we&rsquo;ve worked on the frontend, which means <em>thing that are shown in the browser</em>.</p><p>When data is involved, we must create an API that listens on a particular address on a <em>server</em>, and you&rsquo;ll send data to this address.</p><p>We do this by <strong>running JavaScript on the server</strong> with a tool called <strong>Node.js</strong>.</p><p>Node.js is how we run JavaScript programs on a remote computer.</p><p>One thing to note is that JavaScript is the only programming language that can run inside the browser, for historical reasons.</p><p>So inside the browser we don&rsquo;t have any choice. But outside the browser, on a remote server, we could use any programming language. For example Python, Java, Ruby, Go. So why JavaScript?</p><p>Because you already know JavaScript. It&rsquo;s much better to become 2x better at one programming language than learning 2 different languages at the same time.</p><p>And because by using JavaScript on both the frontend and the backend you can do really fancy stuff, as you&rsquo;ll later see with Next.js.</p><p>Create a simple API with Node.js, and post your form data to it.</p><h2 id=\"databases\">Databases</h2><p>Now you&rsquo;ll want to store this data somewhere. That&rsquo;s where you&rsquo;ll start working with a <strong>database</strong>.</p><p>There are many different kinds of databases. I recommend you pick PostgreSQL as it&rsquo;s the most flexible and the one you can really use all of the time.</p><blockquote><p>Tip: I&rsquo;d ignore MongoDB at this point. Many tutorials use it but if you were to learn just one database to optimize how you spend your time, pick a SQL database - and while we&rsquo;re there, pick the best SQL database, PostgreSQL.</p></blockquote><p>Connect your Node app to the database and learn how to store and retrieve data.</p><h2 id=\"react\">React</h2><p>Now it&rsquo;s time to learn React, by reading my <a href=\"https://flaviocopes.com/page/react-handbook/\">React Beginner&rsquo;s Handbook</a>, and start working on your first React application.</p><p>Start simple. Try to do the same things you did in HTML, but this time with React. Learn JSX, the &ldquo;HTML of React&rdquo;.</p><h2 id=\"learn-next-js\">Learn Next.js</h2><p>Once you learn the concepts, add Next.js into the mix.</p><p>Next.js is useful because React is a great way to create user interfaces but ignores, on purpose, many things like server-side rendering, serving dynamic data, routing, static site generation, code splitting, and lots of advanced concepts you&rsquo;ll always need on any moderately complex website or web application.</p><p>You&rsquo;ll realize what you need while building applications.</p><p>The <a href=\"https://flaviocopes.com/page/nextjs-handbook/\">Next.js Handbook</a> is a good introduction to Next.js.</p><p>After you&rsquo;ve reached this stage, you can start using Next.js to create basically everything. Learn how to create API routes so you don&rsquo;t have to use Node.js directly any more, Next.js will take care of deploying your APIs in a &ldquo;serverless&rdquo; way.</p><h2 id=\"work-on-tons-of-projects\">Work on tons of projects</h2><p>Work on tons of projects and gain confidence and experience. Keep iterating.</p><p>I run a bootcamp every year at <a href=\"https://bootcamp.dev\">https://bootcamp.dev</a> where we work on 15 different applications.</p><p>Practice is everything. At some point following tutorials is not important any more. What matters is progressing on projects and learning how to solve problems as they show up.</p><p>Start building your portfolio of projects. Start with small projects, continue with more complex ones.</p><p>Share everything you do on Twitter, to make friends with other developers.</p><p>Learn how to debug, learn how to do testing, how to secure your applications. Master Git and how to deploy applications on Vercel and other cloud providers.</p><p>Go on and fail. Rinse and repeat.</p><p>Find your &ldquo;north star&rdquo; project. The thing that excites you to work on. Build your SaaS (software as a service). Build a product and sell it on your Next.js website. Create an ecommerce with Next.js. Whatever your north star is.</p><p>Stay focused. Ignore the fads and the &ldquo;next big thing&rdquo;.</p><p>Now you can choose if you want to become a specialist in a particular thing in this stack, or you want to be a generalist. Don&rsquo;t hop to different frameworks, double down on what you already know.</p><p>Whenever you feel ready, you can search for a job, or you can create your own job. Create a software product and sell it independently. Start freelancing and advertise yourself on the Internet as a React / Next.js developer. Find a local company that needs a developer. Ask an agency if they need help. Get hired at a local company or start the interview process at a big corporation or FAANG. Find a remote job.</p><p>You&rsquo;re a highly valued professional now. Companies have a deep need for people like you.</p><p>The sky is the limit.</p>      ",
  "image": "https://flaviocopes.com/img/avatar.png",
  "description": "Web Development is always evolving and every year in January I like to take a step back and re-evaluate and observe the ecosystem.\nThe question is: where should beginner Web Developers start in 2022, so they will learn skills they’ll find jobs for?\nHas the map changed? Is it different from one year ago?\nChanges seem to take forever, but they can be subtle and sometimes things radically change from one year to another and you don’t even realize.",
  "publisher": "Flaviocopes",
  "publisherUrl": "https://flaviocopes.com/"
}