{
  "title": "How to debug JavaScript code",
  "url": "https://flaviocopes.com/debugging/",
  "date": "Tue, 08 Feb 2022 07:00:00 +0200",
  "content": "        <p>Debugging is a great skill to learn how to solve every problem with your JavaScript code.</p><p>Every day we wake up, have a nice breakfast, head to the computer and there we sit, to write perfect code that does exactly what we want.</p><p>Then we wake up.</p><p>That would be ideal, right? But it was a dream.</p><p>As good as you can become, there’s no way you can write bug-free code. Code has bugs. By definition.</p><p>A bug is a problem that you did not see or anticipate when you set out to write the code.</p><p>A bug might be discovered only when you release your program to users, and that’s the worse situation.</p><p>A bug can be discovered by yourself when you test the program, and it might even happen when things - working perfectly previously - starts to break because you changed one line.</p><p>Those are called regression bugs.</p><p>Bugs are part of our day to day as developers, but our job is to minimize them as much as possible.</p><p>Debugging is easy when you know how to deal with bugs.</p><h2 id=\"how-do-you-deal-with-bugs\">How do you deal with bugs?</h2><p>Well, first by trying to avoid them as much as possible, by carefully <strong>thinking</strong> about how your program should work, even before you write a single line of code.</p><p>Then, by analyzing every single line of code you wrote for possible issues or side effects or unconsidered things.</p><p>But things always slip under the radar. No one introduces bugs on purpose. Often times bugs only show up when the program is in production and used by the clients.</p><p>And.. once you know there’s a bug, how do you solve it?</p><p>Well, the hardest part is always identifying where the bug comes from.</p><p>Then the second hardest part is figuring out why this bug happens.</p><p>Solving the bug is generally easy once you know all of the above.</p><p>Generally we can do two things to solve the bug.</p><p>One technique is very basic and involves trying to figure out the values of the state (the content of the variables), and the flow of the program, and printing those variables to the logs, or to the output of your program.</p><h2 id=\"figuring-out-where-the-error-could-be\">Figuring out where the error could be</h2><p>Debugging is one of those skills that’s core to the activity of a programmer.</p><p>Sometimes we do our best work, yet the program is not working correctly, for example, it’s crashing, it’s just slow or it’s printing wrong information.</p><p>What do you do when a program you wrote is not behaving like you expect?</p><p>You start debugging it.</p><p>The first step is always to look at what is happening, and trying to determine where the problem is coming from.</p><p>Is it a problem in the environment?</p><p>Is it a problem in the input you gave to the program?</p><p>Is it a one-time crash due to too much memory usage?</p><p>Or is it happening every time you run it?</p><p>Those are all key information to start going in the right direction when figuring out a problem.</p><p>Once you have some sort of idea where the error is coming from, you can start checking that specific part of code.</p><p>The simplest way to debug, at least in terms of tooling, is by reading the code you wrote. Aloud.</p><p>There is some magical thing in hearing from our own voice that does not happen when you read in silence.</p><p>Often times I found problems in this way.</p><p>After this step, it&rsquo;s time to use some tools.</p><h2 id=\"your-first-contact-with-alert-and-console-log\">Your first contact with <code>alert()</code> and <code>console.log()</code></h2><p>If reading the code reveals nothing to you, the next logical step is to start adding a few lines into your code that can shed some light.</p><p>In JavaScript frontend code what you’ll often do is to use <code>alert()</code> and <code>console.log</code> .</p><p>Consider this line:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >a</span> <span >=</span> <span >calculateA</span>()<span >const</span> <span >b</span> <span >=</span> <span >calculateB</span>()<span >const</span> <span >result</span> <span >=</span> <span >a</span> <span >+</span> <span >b</span></code></pre></div><p>For some reason we don&rsquo;t know, the final result of the code is not correctly calculated, so we start by adding <code>alert(a)</code> and <code>alert(b)</code> before calculating the result.</p><p>The browser will open two alert panels when it executes the code:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >a</span> <span >=</span> <span >calculateA</span>()<span >const</span> <span >b</span> <span >=</span> <span >calculateB</span>()<span >alert</span>(<span >a</span>)<span >alert</span>(<span >b</span>)<span >const</span> <span >result</span> <span >=</span> <span >a</span> <span >+</span> <span >b</span></code></pre></div><p>This works fine if what you are passing to <code>alert()</code> is a string or a number.</p><p>As soon as you have an array or an object things start to be too complicated for <code>alert()</code>, and you can use <code>console.log()</code>:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >a</span> <span >=</span> <span >calculateA</span>()<span >const</span> <span >b</span> <span >=</span> <span >calculateB</span>()<span >console</span>.<span >log</span>(<span >a</span>)<span >console</span>.<span >log</span>(<span >b</span>)<span >const</span> <span >result</span> <span >=</span> <span >a</span> <span >+</span> <span >b</span></code></pre></div><p>The value is printed in the JavaScript console of the browser developer tools.</p><h2 id=\"inspecting-objects\">Inspecting objects</h2><p>Let&rsquo;s say we have this object <code>car</code>, but we don&rsquo;t know its content, and we want to inspect it:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >car</span> <span >=</span> {  <span >color</span><span >:</span> <span >&#34;black&#34;</span>,  <span >manufacturer</span><span >:</span> <span >&#34;Ford&#34;</span>,  <span >model</span><span >:</span> <span >&#34;Fiesta&#34;</span>,}</code></pre></div><p>We have several ways to do that.</p><h3 id=\"console-log\"><code>console.log</code></h3><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >console</span>.<span >log</span>(<span >car</span>)</code></pre></div><p><img src=\"console-log.png\" alt=\"Inspect object using console.log\" /></p><h3 id=\"console-dir\"><code>console.dir</code></h3><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >console</span>.<span >dir</span>(<span >car</span>)</code></pre></div><p><img src=\"console-dir.png\" alt=\"Inspect object using console.dir\" /></p><p>In Node.js you can use the <code>colors</code> property to render colors in the terminal:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >console</span>.<span >dir</span>(<span >car</span>, { <span >colors</span><span >:</span> <span >true</span> })</code></pre></div><p><img src=\"node-console-dir.png\" alt=\"console.dir in Node with colors\" /></p><h2 id=\"json-stringify\"><code>JSON.stringify()</code></h2><p>This will print the object as a string representation:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >JSON</span>.<span >stringify</span>(<span >car</span>)</code></pre></div><p><img src=\"json-stringify.png\" alt=\"Inspect object using console.dir\" /></p><p>By adding these parameters:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >JSON</span>.<span >stringify</span>(<span >car</span>, <span >null</span>, <span >2</span>)</code></pre></div><p>you can make it print more nicely. The last number determines the amount of spaces in indentation:</p><p><img src=\"json-stringify-nicer.png\" alt=\"Inspect object using console.dir\" /></p><p><code>JSON.stringify()</code> has the advantage of working outside of the console, as you can print the object on the screen as well.</p><h2 id=\"iterate-the-properties-using-a-loop\">Iterate the properties using a loop</h2><p>The <code>for...in</code> loop is handy to print all the properties of an object, used in this way:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >inspect</span> <span >=</span> (<span >obj</span>) =&gt; {  <span >for</span> (<span >const</span> <span >prop</span> <span >in</span> <span >obj</span>) {    <span >if</span> (<span >obj</span>.<span >hasOwnProperty</span>(<span >prop</span>)) {      <span >console</span>.<span >log</span>(<span >`</span><span >${</span><span >prop</span><span >}</span><span >: </span><span >${</span><span >obj</span>[<span >prop</span>]<span >}</span><span >`</span>)    }  }}<span >inspect</span>(<span >car</span>)</code></pre></div><p><img src=\"looping-properties.png\" alt=\"Looping properties\" /></p><h2 id=\"using-the-browser-debugger\">Using the browser debugger</h2><p>It’s very important to be able to debug programs that don’t work as you expect.</p><p>One tool that helps you a lot when figuring out the source of bugs is to use the debugger.</p><p>The debugger is a tool that can be either be provided by your programming language compiler, or by the tooling that’s built around it.</p><p>For example the Visual Studio Code editor by Microsoft provides a JavaScript debugger.</p><p>Another debugger is provided inside the browser.</p><p>Using a debugger you will be able to stop the running of the program at any time you want, watch the content of the variables, execute any code you want, and step through the program execution one line of code at a time.</p><p>In the browser, adding the <code>debugger</code> statement to your code will pause the browser rendering the page and will start the debugger.</p><p>The debugger is the most powerful tool in the browser developer tools, and it&rsquo;s found in the <em>Sources</em> panel:</p><p><img src=\"debugger.png\" alt=\"The debugger\" /></p><p>The top part of the screen shows the files navigator.</p><p>You can select any file and inspect it on the right. This is very important to set breakpoints, as we&rsquo;ll see later.</p><p>The bottom part is the actual debugger.</p><h2 id=\"breakpoints\">Breakpoints</h2><p>When the browser loads a page, the JavaScript code is executed until a breakpoint is met.</p><p>At this point the execution is halted and you can inspect all about your running program.</p><p>You can check the variables values, and resume the execution of the program one line at a time.</p><p>But first, what is a breakpoint? In its simple form, a breakpoint is a <code>breakpoint</code> instruction put in your code. When the browser meets it, it stops.</p><p>This is a good option while developing. Another option is to open the file in the Sources panel and click the number on the line you want to add a breakpoint:</p><p><img src=\"added-breakpoint.png\" alt=\"Added breakpoint\" /></p><p>Clicking again the breakpoint will remove it.</p><p>After you add a breakpoint you can reload the page and the code will stop at that execution point when it finds the breakpoint.</p><p>As you add the breakpoint you can see in the <em>Breakpoints</em> panel that <code>form.js</code> on line <code>7</code> has the breakpoint. You can see all your breakpoints there, and disable them temporarily.</p><p>There are other types of breakpoints as well:</p><ul><li><strong>XHR/fetch breakpoints</strong>: triggered when any network request is sent</li><li><strong>DOM breakpoints</strong>: triggered when a DOM element changes</li><li><strong>Event listener breakpoints</strong>: triggered when some event happens, like a mouse click</li></ul><p><img src=\"breakpoints.png\" alt=\"Breakpoints\" /></p><h2 id=\"scope\">Scope</h2><p>In this example I set a breakpoint inside an event listener, so I had to submit a form to trigger the it:</p><p><img src=\"triggered-breakpoint.png\" alt=\"Triggered breakpoint\" /></p><p>Now all the variables that are in the scope are printed, with their respective values. You can edit those variables by double clicking them.</p><h2 id=\"watch-variables-and-expressions\">Watch variables and expressions</h2><p>Right to the <em>Scope</em> panel there&rsquo;s the <em>Watch</em> panel.</p><p>It has a <code>+</code> button which you can use to add any expression. For example adding <code>name</code> will print the <code>name</code> variable value, in the example <code>Flavio</code>. You can add <code>name.toUpperCase()</code> and it will print <code>FLAVIO</code>:</p><p><img src=\"watch-expressions.png\" alt=\"Watch expressions\" /></p><h2 id=\"resume-the-execution\">Resume the execution</h2><p>Now the scripts are all halted since the breakpoint stopped the execution.</p><p>There is a set of buttons above the &ldquo;Paused on breakpoint&rdquo; banner that let you alter this state.</p><p>The first is in blue. Clicking it resumes the normal script execution.</p><p>The second button is <strong>step over</strong>, and it resumes execution until the next line, and stops again.</p><p>The next button perform a <strong>step into</strong> operation: goes into the function being executed, letting you go into the details of it.</p><p><strong>Step out</strong> is the opposite: goes back to the outer function calling this one.</p><p>Those are the main ways to control the flow during debugging.</p><h2 id=\"edit-scripts\">Edit scripts</h2><p>From this devtools screen you can edit any script, also while the script is halted in its execution. Just edit the file and press cmd-S on Mac or ctrl-S on Windows/Linux.</p><p>Of course the changes are not persisted to disk unless you are working locally and set up workspaces in the devtools, a more advanced topic.</p><h2 id=\"inspect-the-call-stack\">Inspect the call stack</h2><p>The <strong>call stack</strong> is great to see how many functions levels you are deep into the JavaScript code. It lets you move up in the stack too by clicking each function name:</p><p><img src=\"call-stack.png\" alt=\"Call stack\" /></p><h2 id=\"print-the-stack-trace\">Print the stack trace</h2><p>There might be cases where it&rsquo;s useful to print the call stack trace of a function, maybe to answer the question <em>how did you reach that part of code?</em></p><p>You can do so using <code>console.trace()</code>:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >function2</span> <span >=</span> () =&gt; <span >console</span>.<span >trace</span>()<span >const</span> <span >function1</span> <span >=</span> () =&gt; <span >function2</span>()<span >function1</span>()</code></pre></div><p><img src=\"console-trace.png\" alt=\"Print stack trace\" /></p><h2 id=\"logging-different-error-levels\">Logging different error levels</h2><p>As we saw previously, <code>console.log</code> is great for printing messages in the Console.</p><p>We&rsquo;ll now discover three more handy methods that will help us debug, because they implicitly indicate various levels of error.</p><p>First, <strong>console.info()</strong></p><p>As you can see a little &lsquo;i&rsquo; is printed beside it, making it clear the log message is just an information.</p><p>Second, <strong>console.warn()</strong></p><p>prints a yellow exclamation point.</p><p>If you activate the Console filtering toolbar, you can see that the Console allows you to filter messages based on the type, so it&rsquo;s really convenient to differentiate messages because for example if we now click &lsquo;Warnings&rsquo;, all the printed messages that are not warnings will be hidden.</p><p>The third function is <strong>console.error()</strong></p><p>this is a bit different than the others because in addition to printing a red X which clearly states there&rsquo;s an error, we have the full stack trace of the function that generated the error, so we can go and try to fix it.</p><p><img src=\"logging.png\" alt=\"Logging stack trace\" /></p><h2 id=\"preserve-logs-during-navigation\">Preserve logs during navigation</h2><p>Console messages are cleared on every page navigation, unless you check the <strong>Preserve log</strong> in the console settings:</p><p><img src=\"preserve-log.png\" alt=\"Preserve log during navigation\" /></p><h2 id=\"grouping-console-messages\">Grouping console messages</h2><p>The Console messages can grow in size and the noise when you&rsquo;re trying to debug an error can be overwhelming.</p><p>To limit this problem the Console API offers a handy feature: Grouping the Console messages.</p><p>Let&rsquo;s do an example first.</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >console</span>.<span >group</span>(<span >&#39;Testing the location&#39;</span>)<span >console</span>.<span >log</span>(<span >&#39;Location hash&#39;</span>, <span >location</span>.<span >hash</span>)<span >console</span>.<span >log</span>(<span >&#39;Location hostname&#39;</span>, <span >location</span>.<span >hostname</span>)<span >console</span>.<span >log</span>(<span >&#39;Location protocol&#39;</span>, <span >location</span>.<span >protocol</span>)<span >console</span>.<span >groupEnd</span>()</code></pre></div><p><img src=\"group-1.png\" alt=\"Logging groups\" /></p><p>As you can see the Console creates a group, and there we have the Log messages.</p><p>You can do the same, but output a collapsed message that you can open on demand, to further limit the noise:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >console</span>.<span >groupCollapsed</span>(<span >&#39;Testing the location&#39;</span>)<span >console</span>.<span >log</span>(<span >&#39;Location hash&#39;</span>, <span >location</span>.<span >hash</span>)<span >console</span>.<span >log</span>(<span >&#39;Location hostname&#39;</span>, <span >location</span>.<span >hostname</span>)<span >console</span>.<span >log</span>(<span >&#39;Location protocol&#39;</span>, <span >location</span>.<span >protocol</span>)<span >console</span>.<span >groupEnd</span>()</code></pre></div><p><img src=\"group-2.png\" alt=\"Another example of logging in groups\" /></p><p>The nice thing is that those groups can be nested, so you can end up doing</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >console</span>.<span >group</span>(<span >&#39;Main&#39;</span>)<span >console</span>.<span >log</span>(<span >&#39;Test&#39;</span>)<span >console</span>.<span >group</span>(<span >&#39;1&#39;</span>)<span >console</span>.<span >log</span>(<span >&#39;1 text&#39;</span>)<span >console</span>.<span >group</span>(<span >&#39;1a&#39;</span>)<span >console</span>.<span >log</span>(<span >&#39;1a text&#39;</span>)<span >console</span>.<span >groupEnd</span>()<span >console</span>.<span >groupCollapsed</span>(<span >&#39;1b&#39;</span>)<span >console</span>.<span >log</span>(<span >&#39;1b text&#39;</span>)<span >console</span>.<span >groupEnd</span>()<span >console</span>.<span >groupEnd</span>()</code></pre></div><p><img src=\"group-3.png\" alt=\"Nesting groups\" /></p><h2 id=\"blackbox-scripts\">Blackbox scripts</h2><p>Often times you work with libraries where you don&rsquo;t want to &ldquo;step into&rdquo;, you trust them and you don&rsquo;t want to see their code in the call stack, for example. Like in the above case for <code>validator.min.js</code>, which I use for email validation.</p><p>I trust it does a good job, so I can right-click it in the call stack and press <strong>Blackbox script</strong>. From then on, it&rsquo;s impossible to step into this script code, and you happily work on just your own application code.</p><h2 id=\"use-the-browser-devtools-to-debug-node-js\">Use the browser devtools to debug Node.js</h2><p>Since Node.js is built on the same engine of Chrome, <a href=\"https://flaviocopes.com/v8/\">v8</a>, you can link the 2 and use the Chrome DevTools to inspect the execution of Node.js applications.</p><p>Open your <a href=\"https://flaviocopes.com/macos-terminal/\">terminal</a> and run</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-bash\" data-lang=\"bash\">node --inspect</code></pre></div><p><img src=\"node-inspect.png\" alt=\"node-inspect\" /></p><p>Then in Chrome type this URL: <code>about://inspect</code>.</p><p><img src=\"node-link-browser.png\" alt=\"node-link-browser\" /></p><p>Click the Open dedicated DevTools for Node link next to the Node target, and you’ll have access to Node.js in the browser DevTools:</p><p><img src=\"node-console.png\" alt=\"node-console\" /></p><p>Make sure you click that, and not the inspect link down below, as it tool auto-reconnects to the Node.js instance when we restart it - pretty handy!</p>      ",
  "image": "https://flaviocopes.com/debugging/banner.png",
  "description": "A tutorial on how to use debugging to solve any JavaScript problem",
  "publisher": "Flaviocopes",
  "publisherUrl": "https://flaviocopes.com/"
}